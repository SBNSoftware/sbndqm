#include "simple_channel_info.fcl"
#include "redis_connection.fcl"
#include "TPCChannelMapService.fcl"
#include "SBNDTPCDecoderDefaults.fcl"
#include "services_sbnd.fcl"
#include "simulationservices_sbnd.fcl"

BEGIN_PROLOG
analysis_config: {
  // producer of digits and header info
  raw_digit_producers: [daq]
  header_producer: "daq"
  
  // channel info
  channel_info: {
    n_channels: 11264 # 16 crates
    collection_channels: [[3968,5631],[9600,11263]]  # no signal -- plane is arbitrary
    induction_channels: [[0,3967],[5632,9599]]
  }
  
  // standard analysis config
  threshold_calc: 3
  threshold_sigma: 5
  noise_range_sampling: 1
  n_smoothing_samples: 1
  baseline_calc: 2
  n_mode_skip: 3
  use_planes: false
  // n_max_noise_samples: 100
  refine_baseline: false
  find_signal: false
  
  // turn on for analysis information printed out on stdin
  verbose: false
  // turn on for timing information printed out on stdin
  timing: false
  
  // turn on to save waveform in output ChannelData
  fill_waveforms: false
  
  // turn on to output ReducedChannelData objects instead of
  // ChannelData (will throw out waveform and FFT info)
  reduce_data: false
  
  // number of headers per event provided by input (will be ignored if value is negative)
  // 10 for SBND
  n_headers: 16
}
END_PROLOG

outputs: {
  dumper: {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
    onlyIfPresent: true
  }
}

physics:
{
  // now also have something produce the digits and headers


  producers:
  {
    daq: {
      module_type: SBNDTPCDecoder
      # for debugging -- time (in s) to wait in between analyzing events
      wait_time: -1
      # make the header
      produce_header: true
      baseline_calc: true
      # parameters for timestamps
      timesize: 2519
      # produce timestamps in units of mus
      frame_to_dt: 0.5
      # parameters for header index
      min_slot_no: 3
      channel_per_slot: 64
    }
  }

  analyzers:
  {
    Meta: {
      module_type: ReportMetadata
    }

    OfflineEvd: {
      module_type: OfflineEvd
      raw_digit_producers: [daq]
      verbose: false
      timing: false
      qmax_0: 80
      qmin_0: -20
      qmax_1: 80
      qmin_1: -20
      qmax_2: 200
      qmin_2: -50
    }

    OnlineSunset: {
      module_type: TPCSunsetAnalyzer
      sunset_tick: 375
      metric_sunsets: {
        streams: [archiving, 10s]
        groups: {
          Sunset: [0]
        }
        metrics:{
          ndigi: {
      #      title: "# of Digital Noise Ch"
          }
          nspikes: {
      #      title: "# of a Spiked Ch"
          }
        }
      }
    }
 
    OnlineAnalysisRawData: {
      module_type: OnlineAnalysis
      @table::analysis_config
      send_metrics: false
      send_waveforms: false
      send_ffts: false
      fft_name: fft
      waveform_name: waveform
      fft_per_channel: false # don't calculate FFT's
      wait_period: 10 # s 
      send_time_avg_ffts: false
      n_evt_fft_avg: 50
      n_evt_send_rawdata: 1
      broken_th: 1
      // send_correlation_matrix: true
      // correlation_matrix_name: correlation
      // n_correlation_matrix_samples: 100
    }

    OnlineAnalysis: {
      module_type: OnlineAnalysis
      group_name: tpc_channel
      send_sbnd_metrics: false
      broken_th: 1
      @table::analysis_config
      metrics: {
        redis_metric_10s: {    
          level: 3
          metricPluginType: "redis"
          reporting_interval: 10.0
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":10s"
        }
        redis_metric_archive: {
          level: 3
          metricPluginType: "redis"
          reporting_interval: 30.0 # 30s
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":archiving"
        }
      }
      metric_config_broken: {
        streams: [archiving, 10s]
        groups: {
          tpc: [0]
        }
        metrics: {
          broken: {
            units: Broken
            title: "Broken Events"
            display_range: [-1, 2]
          }
       }
     }
      metric_config: {
        streams: [archiving, 10s]
        groups: {
          tpc_channel:[[0,11263]] # 8 crates
        }
        metrics: {
          rms: {
            units: ADC
            #title: "TPC wire %(instance)s rms"
            #display_range: [0, 5]
          }
          baseline: {
            units: ADC
            format: "0x#"
            #title: "TPC wire %(instance)s baseline"
            #display_range: [1990, 2040]
          }
          next_channel_dnoise: {
            #title: "TPC wire %(instance)s next channel dnoise"
            display_range: [0.2, 1.2]
          }
          mean_peak_height: {
            units: ADC
            #title: "TPC wire %(instance)s mean peak height"
            display_range: [0, 50]
          }
          occupancy: {
            #title: "TPC wire %(instance)s occupancy"
            display_range: [0., 1.]
          }
          baseline_femb: {
            format: "0x#"
          }
          baseline_asic: {
            format: "0x#"
          }
          baseline_chan: {
            format: "0x#"
            units: "ADC"
          }
      	}
      }
    }
  }

  filters: {
    f1: {
        module_type: EventIDFilter
        errorOnFailureToPut: true  # default
        idsToMatch: [
            "*:*:0"
        ]
    }
  }

  my_producer_modules: ["!f1", daq]
  a: [Meta, OfflineEvd]
  out1 : [dumper]
  end_paths: [a]
}


services:
{
  RedisConnection: @local::redis_connection
  ArtdaqSharedMemoryServiceInterface: { service_provider: ArtdaqGlobalsService }
  TPCChannelMapService: @local::SBNDTPCChannelMapServiceDefaults
  AuxDetExptGeoHelperInterface: { service_provider: "sbndcode/CRT/CRTGeometryHelper" }
  ExptGeoHelperInterface:    @local::sbnd_geometry_helper
  Geometry:                  @local::sbnd_geo
  GeometryConfigurationWriter:    {}
}

services.RedisConnection.host: "sbnd-db01.fnal.gov"
services.RedisConnection.passfile: "/home/nfs/gputnam/redis_passfile"
services.TPCChannelMapService: @local::SBNDTPCChannelMapServiceDefaults


source:
{
  module_type: RootInput
  fileNames: ["/sbnd/data/users/gputnam/VST/nevis_test_stand_data/integration/digits_and_header_data.root"]
}

process_name: TPCANALYSIS

