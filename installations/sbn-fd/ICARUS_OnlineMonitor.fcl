#include "redis_connection.fcl"
#include "services_basic_icarus.fcl"
#include "stage0_icarus_defs.fcl"
#include "icarus_online_decoder_defs.fcl"
#include "icarus_pmt_analysis_defs.fcl"
#include "icarus_trigger_analysis_defs.fcl"

#analysis configuration pieces
BEGIN_PROLOG

tpclabels_daq: ["daq:PHYSCRATEDATATPCEE","daq:PHYSCRATEDATATPCEW","daq:PHYSCRATEDATATPCWE","daq:PHYSCRATEDATATPCWW"]
tpclabels_DecoderRaw: ["daqTPC:PHYSCRATEDATATPCEERAW","daqTPC:PHYSCRATEDATATPCEWRAW","daqTPC:PHYSCRATEDATATPCWERAW","daqTPC:PHYSCRATEDATATPCWWRAW"]
tpclabels_DecoderDenoised: ["daqTPC:PHYSCRATEDATATPCEE","daqTPC:PHYSCRATEDATATPCEW","daqTPC:PHYSCRATEDATATPCWE","daqTPC:PHYSCRATEDATATPCWW"]

analysis_config: {
  // producer of digits and header info
  raw_digit_producers: [@sequence::tpclabels_DecoderRaw]
#  raw_digit_instance: RAW
  header_producer: ""

  // channel info
  channel_info: {
    n_channels: 55296 # ALL crates
    collection_channels: [[0,55296]] # no signal -- plane is arbitrary
    induction_channels: []
  }

  // standard analysis config
  threshold_calc: 3
  threshold_sigma: 5
  noise_range_sampling: 1
  n_smoothing_samples: 1
  baseline_calc: 2
  n_mode_skip: 3
  use_planes: false
  refine_baseline: false

  // turn on for analysis information printed out on stdin
  verbose: false
  // turn on for timing information printed out on stdin
  timing: false

  // turn on to save waveform in output ChannelData
  fill_waveforms: false

  // turn on to output ReducedChannelData objects instead of
  // ChannelData (will throw out waveform and FFT info)
  reduce_data: false

  // number of headers per event provided by input (will be ignored if value is negative)
  // 10 for SBND
  n_headers: -1

  // Change tick period to be 0.4 for ICARUS
  tick_period: 0.4
}

END_PROLOG


###use icaruscode decoder.fcl as a base
###include "decoder.fcl"
#include "stage0_icarus_driver_common.fcl"

#service overrides
services.RedisConnection: @local::redis_connection
services.RedisConnection.host: "icarus-db02.fnal.gov"
services.InitMetricManager: {
  connections: {
    archiving: {
      level: 3
      metricPluginType: "redis"
      reporting_interval: 60.0 # 60s
      verbose: true
      // need to add postfix otherwise this metric sender and the other one will collide
      redis_key_postfix: ":archiving"
      send_zeros: false
    }
  }
}
services.ArtdaqSharedMemoryServiceInterface:
{
  service_provider: "ArtdaqSharedMemoryService"
}
services.NuRandomService: @erase
services.MemoryTracker: @erase
services.TimeTracker: @erase
services.DetectorPropertiesService: @erase
services.DetectorClocksService: @local::icarus_detectorclocks
services.SignalShapingICARUSService: @erase
services.TFileService.fileName: "/dev/null"
services.message: @local::icarus_basic_services.message
services.message.destinations.LogErrorFile: @erase
services.message.destinations.LogSeeds: @erase

#replace the source
source:
{
  module_type: TransferInput
  register_fragment_types: false
  # The timeout shouldn't be much smaller than the period between events, otherwise
  # there's a spew of timeout messages
  timeoutInUsecs: 50000000

  commanderPluginType: xmlrpc
  dispatcherHost: localhost
  dispatcherPort: 6020

  transfer_plugin: {

     unique_label: "OnlineMonitor"
      transferPluginType: Shmem
      shm_key: 0x40471454
      max_fragment_size_words: 100000000 #58543672 #33554432
      #max_event_size_bytes: 468349376
      first_event_builder_rank: 0
          source_rank: 5
          destination_rank: 6
  }

  dispatcher_config: {
    unique_label: "OnlineMonitor"
    path: [ out ]
    physics: {}
    outputs: {
      out: {
        module_type: TransferOutput
        transfer_plugin: {

           unique_label: "OnlineMonitor"
            transferPluginType: Shmem

            shm_key: 0x40471454

            max_fragment_size_words: 100000000 #58543672 #33554432
              first_event_builder_rank: 0
              destination_rank: 6
        }
      }
    }
  }
}

#decoder output
outputs.decodedout:{
  module_type: RootOutput
  fileName:    "/data/onmon_files/onmon_output_%r_%s_%tc_%#-decoded.root"
  dataTier:    "raw"
  compressionLevel: 3
  SelectEvents: [pscale_OnMonFiles]
  outputCommands: [ "keep *_*_*_*", "drop raw::OpDetWaveforms_*_*_*" ]

  fileProperties: { 
    #maxSubRuns: 1 
    #maxRuns: 1 
    maxEvents: 1
  }
}

# TPC decoder
physics.producers.daqTPC: @local::physics.producers.daqTPC
physics.producers.daqTPC.FragmentsLabelVec: [ @sequence::tpclabels_daq ]
physics.producers.daqTPC.OutputRawWaveform: true

# PMT + trigger decoder
physics.producers.daqPMT: @local::decodePMTOnline
physics.producers.daqTrigger: @local::decodeTriggerOnline

#add online purity producers
physics.producers.purityana0:
{
  RawModuleLabel: [@sequence::tpclabels_DecoderDenoised] 
  module_type:    "ICARUSPurityDQM"
  ValoreTauFCL:  600000.
  CryostatFCL: 0
  PlaneFCL: 2
  ThresholdFCL: 3
  PersistPurityInfo: false
  FillAnaTuple: false
}
physics.producers.purityana1: @local::physics.producers.purityana0
physics.producers.purityana1.CryostatFCL: 1


#declare a filters section
physics.filters:
{
  prescale1:{ 
    module_type: "Prescaler"
    prescaleFactor: 1
    prescaleOffset: 0
  }
  prescale2:{ 
    module_type: "Prescaler"
    prescaleFactor: 2
    prescaleOffset: 0
  }
  prescale10:{ 
    module_type: "Prescaler"
    prescaleFactor: 10
    prescaleOffset: 0
  }
  prescale5:{ 
    module_type: "Prescaler"
    prescaleFactor: 5
    prescaleOffset: 0
  }
  prescale20:{ 
    module_type: "Prescaler"
    prescaleFactor: 20
    prescaleOffset: 0
  }
  prescale100:{ 
    module_type: "Prescaler"
    prescaleFactor: 100
    prescaleOffset: 0
  }
}

##override the analyzers section
physics.analyzers:
{

  # get PMT/Trigger analysis from includes  
  pmtana: @local::pmtAnalysis
  timingana: @local::timingAnalysis
  triggerana: @local::triggerAnalysis 

  Meta: {
    module_type: ReportMetadata
    RedisKey: eventmetaTPC

    SelectEvents: [tpc_only]
  }

  MetaPMT: {
    module_type: ReportMetadata
    RedisKey: eventmetaPMT

    SelectEvents: [pmt_only]
  }

  OnlineAnalysisRawData: {
    module_type: OnlineAnalysis
    @table::analysis_config
    send_metrics: false
    send_waveforms: true
    send_ffts: true
    fft_name: fft
    waveform_name: waveform
    fft_per_channel: true # calculate FFT's
    wait_period: -1 # s
    send_time_avg_ffts: false
    n_evt_fft_avg: 100
    n_evt_send_rawdata: 10
    // send_correlation_matrix: true
    // correlation_matrix_name: correlation
    // n_correlation_matrix_samples: 100

    SelectEvents: [tpc_only]
  }
  
  PurityAnalysis:{
    module_type: TPCPurityDQMSender
    group_name: tpc_purity

    PurityInfoLabels: [purityana0,purityana1]
    PrintInfo: true
    MinTracksToReport: 100

    metric_config: {
      streams: ["archiving"]
      groups: {
        tpc_purity:["EastCryostat","WestCryostat"]
      }
      metrics:{
        attenuation_raw:{
	  units: "ms-1"
	  display_range: [0,2]
        }
        lifetime_raw:{
	  units: ms
	  display_range: [0,20]
        }
      }
    } 
    SelectEvents: [online_purity]
  }

  TPCOnlineAnalysis: {
    module_type: OnlineAnalysis
    group_name: tpc_channel
    @table::analysis_config


    metric_config: {
      streams: ["archiving"]
      groups: {
	tpc_channel:[[0,5760]] # 8 crates
      }
      metrics: {
        rms: {
          units: ADC
          #title: "TPC wire %(instance)s rms"
          display_range: [0, 10]
        }
	filtered_rms: {
          units: ADC
          #title: "TPC wire %(instance)s rms"
          display_range: [0, 10]
        }
        baseline: {
          units: ADC
          #title: "TPC wire %(instance)s baseline"
          display_range: [1990, 2040]
        }
        next_channel_dnoise: {
          #title: "TPC wire %(instance)s next channel dnoise"
          display_range: [0.2, 1.2]
        }
        mean_peak_height: {
          units: ADC
          #title: "TPC wire %(instance)s mean peak height"
          display_range: [0, 50]
        }
        occupancy: {
          #title: "TPC wire %(instance)s occupancy"
          display_range: [0., 1.]
        }
      }
    }
    SelectEvents: [tpc_only]
  }

  TPCOnlineAnalysisDenoised:{
    module_type: OnlineAnalysis
    group_name: tpc_channel
    @table::analysis_config

    raw_digit_producers: [@sequence::tpclabels_DecoderDenoised]

    #raw_digit_instance: ""

    metric_prefix: filtered_

    send_peakheight: false
    send_baseline: false
    send_occupancy: false
    send_dnoise: false
    
    SelectEvents: [tpc_only]
  }

  CRTAna:{
    SelectEvents: [ crt_only ]
    module_type: BernCRTdqm

    metric_board_config: {
      groups:{
        CRT_board:[[1,97]] //1, 3-11, 13-17, 19, 21-97
        CRT_board_top:[[1,123]]
     }                  //missing 2, 12, 18, 20
      streams:[archiving]
				
      metrics:{
        TS0:{}
	TS1:{}
	n_events:{}
	MaxADCValue:{}
	baseline:{}

	earlysynch:{alarmrange: [-100000,100000] }
	latesynch:{ alarmrange: [-100000,100000] }

	lastbighit:{ alarmrange: [0,100000000] }
      }
    }

    metric_channel_config: {
      groups:
      {
        CRT_channel:[[0,256]]
      }
      streams:[archiving]
      
      metrics:{
        ADC:{
          display_range: [0, 5000]
        }
      }	
    }
  }


  fragana:{
    SelectEvents: [ pmt_only, crt_only ]

    module_type: FragmentDQMAna
    
    metric_config: {
       groups: {
           PMT_cont_frag : [8204, 8208, 8206, 8203, 8200, 8202, 8209, 8194, 8214, 
	   		    8199, 8211, 8213, 8198, 8215, 8205, 8212, 8201, 8210, 
 			    8192, 8196, 8195, 8197, 8207, 8193]

           CRT_cont_frag : [13038, 12978, 13043, 12892, 12857, 12890, 12941, 12936, 12950, 
	   		    12891, 12872, 12987, 12983, 12960, 12984, 12961, 12888, 12863, 
			    13051, 12980, 13041, 12937, 13040, 12897, 13034, 12976, 12870, 
			    12882, 13031, 12974, 13047, 12585, 12560, 12592, 12552, 12550, 
			    12986, 12866, 13053, 13033, 12881, 12972, 12925, 12981, 12883, 
			    13042, 12919, 12914, 12916, 12924, 13054, 13045, 12964, 12998, 
			    12887, 12952, 12966, 12900, 12904, 12865, 13049, 12864, 12885, 
			    12915, 12802, 12922, 12954, 12982, 12867, 12938, 13044, 12989, 
			    12955, 12907, 12988, 12970, 12917, 12861, 13004, 12990, 12858, 
			    12609, 12977, 13052, 12926, 12880, 12901, 13048, 13003, 12898, 
			    12962, 12943, 12895, 12973, 12942, 13035, 12600, 12586, 12933, 
			    12947, 12905, 12968, 12629, 12569, 12599, 12561, 12637, 12636, 
			    12913, 12630, 12593, 12610, 12628, 12581, 12622, 12979, 12555, 
			    12570, 12554, 12638, 12605, 12611, 12587, 12563, 12639, 12576, 
			    13037, 12616, 12806, 12969, 12912, 12939, 12920, 12934, 13032, 
			    12985, 12944, 12929, 13002, 12930, 12860, 12631, 12859, 13050, 
			    12862, 13046, 12965, 12902, 12945, 12894, 12935, 12551, 13039, 
			    12553, 12948, 12910, 12589, 12620, 12641, 12579, 12573, 12588, 
			    12633, 12567, 12574, 12613, 12634, 12580, 12619, 12607, 12624, 
			    12604, 12568, 12548, 12545, 12635, 12614, 12623, 12618, 12590, 
			    12608, 12583, 12584, 12617, 12615, 12591, 12612, 12601, 12575, 
			    12594, 12595, 12627, 12571, 12557, 12565, 12577, 12596, 12602, 
			    12640, 12621, 12626, 12932, 12632, 12558, 12572, 12566, 12597, 
			    12603, 12606, 12549, 12547, 12625, 12582, 12578, 12559, 12598] 
          }
        
  
       streams: [archiving]
       metrics: {
         frag_count: {}
         zero_rate: {}
       }

      }

  }

}



## SETTING UP TRIGGER-PATHS (PRODUCERS)
## BH: comment pscale_OnMonFiles to turn off output file
physics.analyzers.pmtana.SelectEvents: [ pmt_only ]
physics.analyzers.timingana.SelectEvents: [ pmt_only ]
physics.analyzers.triggerana.SelectEvents: [ trigger_only ]

physics.pscale_OnMonFiles:    [prescale20, daqTPC ]
physics.online_purity:   [prescale5,  daqTPC, purityana0, purityana1]
physics.tpc_only: [ prescale5, daqTPC ]
physics.pmt_only: [ prescale1, daqPMT, daqTrigger ]
physics.trigger_only: [ prescale1, daqTrigger ]
physics.crt_only: [ prescale1 ]

physics.tpc_path: [ pscale_OnMonFiles, online_purity, tpc_only ]
physics.trigger_path: [trigger_only]
physics.pmt_path: [ pmt_only ]
physics.crt_path: [ crt_only ]

physics.trigger_paths: [ @sequence::physics.tpc_path,
			 @sequence::physics.pmt_path,
			 @sequence::physics.crt_path,
			 @sequence::physics.trigger_path ]

## SETTING UP PHYSICS-PATHS (ANALYZERS)
physics.anatpc: [ TPCOnlineAnalysis, TPCOnlineAnalysisDenoised, OnlineAnalysisRawData, Meta, PurityAnalysis ]
physics.anatrigger: [ triggerana ]
physics.anapmt: [ MetaPMT, pmtana , timingana, fragana ]
physics.anacrt: [ CRTAna , fragana ]

physics.a: [ @sequence::physics.anatrigger, @sequence::physics.anatpc, @sequence::physics.anapmt, @sequence::physics.anacrt ]

physics.decoded_stream: [ decodedout ]

physics.end_paths: [ a, decoded_stream ] # BH: COMMENT DECODED_STREAM TO TURN OFF OUTPUT FILE

process_name: ICARUSOnlineMonitor
