#include "simple_channel_info.fcl"
#include "redis_connection.fcl"

BEGIN_PROLOG
analysis_config: {
  // producer of digits and header info
  raw_digit_producers: [daq]
  header_producer: ""
  
  // channel info
  channel_info: {
    n_channels: 5760 # 8 crates
    collection_channels: [[0,5760]] # no signal -- plane is arbitrary
    induction_channels: []
  }
  
  // standard analysis config
  threshold_calc: 3
  threshold_sigma: 5
  noise_range_sampling: 1
  n_smoothing_samples: 1
  baseline_calc: 2
  n_mode_skip: 3
  use_planes: false
  refine_baseline: false
  
  // turn on for analysis information printed out on stdin
  verbose: false
  // turn on for timing information printed out on stdin
  timing: false
  
  // turn on to save waveform in output ChannelData
  fill_waveforms: false
  
  // turn on to output ReducedChannelData objects instead of
  // ChannelData (will throw out waveform and FFT info)
  reduce_data: false
  
  // number of headers per event provided by input (will be ignored if value is negative)
  // 10 for SBND
  n_headers: -1
}
END_PROLOG

physics:
{
  // now also have something produce the digits and headers
  producers:
  {
    daq: {
      module_type: ICARUSTPCDecoder
      // for debugging -- time (in s) to wait in between analyzing events
      wait_time: -1
      // make the header
      produce_header: true
      baseline_calc: false
      // parameters for timestamps
      timesize: 2559
      // produce timestamps in units of mus
      frame_to_dt: 0.5
      // parameters for header index
      min_slot_no: 4
      channel_per_slot: 64
    }
  }

  analyzers:
  {
    Meta: {
      module_type: ReportMetadata
      RedisKey: eventmetaTPC
    }

    OnlineAnalysisRawData: {
      module_type: OnlineAnalysis
      @table::analysis_config
      send_metrics: false
      send_waveforms: true
      send_ffts: true
      fft_name: fft
      waveform_name: waveform
      fft_per_channel: true # calculate FFT's
      wait_period: -1 # s 
      send_time_avg_ffts: true
      n_evt_fft_avg: 100
      n_evt_send_rawdata: 100
      // send_correlation_matrix: true
      // correlation_matrix_name: correlation
      // n_correlation_matrix_samples: 100
    }

    OnlineAnalysis:
     {
      module_type: OnlineAnalysis
      group_name: tpc_channel
      @table::analysis_config
      metrics: {

      graphite: {
        level:5
     	metricPluginType: "graphite"
     	reporting_interval: 10.0
     	host:"192.168.191.18"
     	port:2003
     	namespace:"icarus.om."
      }
        redis_metric_archive: {
          level: 3
          metricPluginType: "redis"
          reporting_interval: 1000000.0 # 1000000s
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":archiving"
	  send_zeros: false
        }

      }
      metric_config: {
        streams: [archiving]
        groups: {
	  tpc_channel:[[0,5760]] # 8 crates
        }
        metrics: {
          rms: {
            units: ADC
            #title: "TPC wire %(instance)s rms"
            display_range: [0, 5]
          }
          baseline: {
            units: ADC
            #title: "TPC wire %(instance)s baseline"
            display_range: [1990, 2040]
          }
          next_channel_dnoise: {
            #title: "TPC wire %(instance)s next channel dnoise"
            display_range: [0.2, 1.2]
          }
          mean_peak_height: {
            units: ADC
            #title: "TPC wire %(instance)s mean peak height"
            display_range: [0, 50]
          }
          occupancy: {
            #title: "TPC wire %(instance)s occupancy"
            display_range: [0., 1.]
          }
      	}
      }
    }
  }

  my_producer_modules: [daq]
  a: [OnlineAnalysis, OnlineAnalysisRawData, Meta]
//  end_paths: [a]
}

services:
{
  RedisConnection: @local::redis_connection
}
services.RedisConnection.host: "icarus-db01.fnal.gov"

source:
{
  module_type: RootInput
}

process_name: TPCANALYSIS

