#include "redis_connection.fcl"

#analysis configuration pieces
BEGIN_PROLOG

daqTPC: [daqTPCEE, daqTPCEW, daqTPCWE, daqTPCWW]

analysis_config: {
  // producer of digits and header info
  raw_digit_producers: [@sequence::daqTPC]
  raw_digit_instance: RAW
  header_producer: ""

  // channel info
  channel_info: {
    n_channels: 55296 # ALL crates
    collection_channels: [[0,55296]] # no signal -- plane is arbitrary
    induction_channels: []
  }

  // standard analysis config
  threshold_calc: 3
  threshold_sigma: 5
  noise_range_sampling: 1
  n_smoothing_samples: 1
  baseline_calc: 2
  n_mode_skip: 3
  use_planes: false
  refine_baseline: false

  // turn on for analysis information printed out on stdin
  verbose: false
  // turn on for timing information printed out on stdin
  timing: false

  // turn on to save waveform in output ChannelData
  fill_waveforms: false

  // turn on to output ReducedChannelData objects instead of
  // ChannelData (will throw out waveform and FFT info)
  reduce_data: false

  // number of headers per event provided by input (will be ignored if value is negative)
  // 10 for SBND
  n_headers: -1

  // Change tick period to be 0.4 for ICARUS
  tick_period: 0.4
}
END_PROLOG


###use icaruscode decoder.fcl as a base
#include "decoder.fcl"


#service overrides
services.RedisConnection: @local::redis_connection
services.RedisConnection.host: "icarus-db01.fnal.gov"
services.InitMetricManager: {
  connections: {
    archiving: {
      level: 3
      metricPluginType: "redis"
      reporting_interval: 60.0 # 60s
      verbose: true
      // need to add postfix otherwise this metric sender and the other one will collide
      redis_key_postfix: ":archiving"
      send_zeros: false
    }
  }
}
services.ArtdaqSharedMemoryServiceInterface:
{
  service_provider: "ArtdaqSharedMemoryService"
}
services.NuRandomService: @erase
services.MemoryTracker: @erase
services.TimeTracker: @erase
services.DetectorPropertiesService: @erase
services.SignalShapingICARUSService: @erase
services.TFileService.fileName: "/dev/null"

#replace the source
source:
{
  module_type: TransferInput
  register_fragment_types: false
  # The timeout shouldn't be much smaller than the period between events, otherwise
  # there's a spew of timeout messages
  timeoutInUsecs: 50000000

  commanderPluginType: xmlrpc
  dispatcherHost: localhost
  dispatcherPort: 6020

  transfer_plugin: {

     unique_label: "OnlineMonitor"
      transferPluginType: Shmem
      shm_key: 0x40471454
      max_fragment_size_words: 100000000 #58543672 #33554432
      #max_event_size_bytes: 468349376
      first_event_builder_rank: 0
          source_rank: 5
          destination_rank: 6
  }

  dispatcher_config: {
    unique_label: "OnlineMonitor"
    path: [ out ]
    physics: {}
    outputs: {
      out: {
        module_type: TransferOutput
        transfer_plugin: {

           unique_label: "OnlineMonitor"
            transferPluginType: Shmem

            shm_key: 0x40471454

            max_fragment_size_words: 58543672 #33554432
              first_event_builder_rank: 0
              destination_rank: 6
        }
      }
    }
  }
}

#decoder output
outputs.decodedout:{
  module_type: RootOutput
  fileName:    "/data/onmon_files/onmon_output_%r_%s_%tc_%#-decoded.root"
  dataTier:    "raw"
  compressionLevel: 3
  SelectEvents: [pscale_OnMonFiles]

  fileProperties: { 
    #maxSubRuns: 1 
    #maxRuns: 1 
    maxEvents: 1
  }
}

physics.producers.daqTPCEE: @local::physics.producers.daqTPC
physics.producers.daqTPCEE.FragmentsLabel: "daq:PHYSCRATEDATATPCEE"
physics.producers.daqTPCEW: @local::physics.producers.daqTPC
physics.producers.daqTPCEW.FragmentsLabel: "daq:PHYSCRATEDATATPCEW"
physics.producers.daqTPCWE: @local::physics.producers.daqTPC
physics.producers.daqTPCWE.FragmentsLabel: "daq:PHYSCRATEDATATPCWE"
physics.producers.daqTPCWW: @local::physics.producers.daqTPC
physics.producers.daqTPCWW.FragmentsLabel: "daq:PHYSCRATEDATATPCWW"

#add online purity producers
physics.producers.purityana0:
{
  RawModuleLabel: [@sequence::daqTPC] 
  module_type:    "ICARUSPurityDQM"
  ValoreTauFCL:  600000.
  CryostatFCL: 0
  PlaneFCL: 2
  ThresholdFCL: 3
  PersistPurityInfo: false
  FillAnaTuple: false
}
physics.producers.purityana1: @local::physics.producers.purityana0
physics.producers.purityana1.CryostatFCL: 1


#declare a filters section
physics.filters:
{
  prescale2:{ 
    module_type: "Prescaler"
    prescaleFactor: 2
    prescaleOffset: 0
  }
  prescale10:{ 
    module_type: "Prescaler"
    prescaleFactor: 10
    prescaleOffset: 0
  }
  prescale20:{ 
    module_type: "Prescaler"
    prescaleFactor: 20
    prescaleOffset: 0
  }
  prescale100:{ 
    module_type: "Prescaler"
    prescaleFactor: 100
    prescaleOffset: 0
  }
}

##override the analyzers section
physics.analyzers:
{
  Meta: {
    module_type: ReportMetadata
    RedisKey: eventmetaTPC

    SelectEvents: [tpc_only]
  }

  MetaPMT: {
    module_type: ReportMetadata
    RedisKey: eventmetaPMT

    SelectEvents: [pmt_only]
  }

  OnlineAnalysisRawData: {
    module_type: OnlineAnalysis
    @table::analysis_config
    send_metrics: false
    send_waveforms: true
    send_ffts: true
    fft_name: fft
    waveform_name: waveform
    fft_per_channel: true # calculate FFT's
    wait_period: -1 # s
    send_time_avg_ffts: false
    n_evt_fft_avg: 100
    n_evt_send_rawdata: 10
    // send_correlation_matrix: true
    // correlation_matrix_name: correlation
    // n_correlation_matrix_samples: 100

    SelectEvents: [tpc_only]
  }

  CAENV1730WaveformAnalysis: {
    module_type: CAENV1730WaveformAnalysis
    // producer of digits and header info
    data_label: sbndaq
    InputTag: "daqPMT"
    metric_config: {
      hostname: "icarus-db01.fnal.gov"
      groups: {
        PMT: [ [0, 380] ]
        // "PMT": [ [0, 15], 124]
      }

      streams: ["archiving"]
      metrics: {
        rms: {
          units: ADC
          title: "PMT channel %(instance)s rms"
          display_range: [0., 100.]
         }
    	 baseline: {
      	   units: ADC
      	   title: "%(group)s channel %(instance)s Pedestal"
      	   display_range: [10000, 16000]
    	 }
       }
       // what happens to the title in python:
       // title = title % ({"instance": channel_no, "group": group_name})
    }#end metric_config

    // channel info
    // channel_info: @local::ICARUS_simple_channel_info

    // standard analysis config
    threshold_calc: 3
    threshold_sigma: 5
    noise_range_sampling: 1
    n_smoothing_samples: 1
    baseline_calc: 2
    n_mode_skip: 3
    use_planes: false
    refine_baseline: false

    // turn on for analysis information printed out on stdin
    verbose: false
    // turn on for timing information printed out on stdin
    timing: false

    // turn on to calculate FFT and save them in output ChannelData
    fft_per_channel: false

    // turn on to save waveform in output ChannelData
    fill_waveforms: false

    // turn on to output ReducedChannelData objects instead of 
    // ChannelData (will throw out waveform and FFT info)
    reduce_data: false

    // number of headers per event provided by input (will be ignored if value is negative)
    // 10 for SBND 
    n_headers: -1

    SelectEvents: [pmt_only]
  }//end CAENV1730WaveformAnalysis

  PurityAnalysis:{
    module_type: TPCPurityDQMSender
    group_name: tpc_purity

    PurityInfoLabels: [purityana0,purityana1]
    PrintInfo: true
    MinTracksToReport: 100

    metric_config: {
      streams: ["archiving"]
      groups: {
        tpc_purity:["EastCryostat","WestCryostat"]
      }
      metrics:{
        attenuation_raw:{
	  units: "ms-1"
	  display_range: [0,2]
        }
        lifetime_raw:{
	  units: ms
	  display_range: [0,20]
        }
      }
    } 
    SelectEvents: [online_purity]
  }

  TPCOnlineAnalysis: {
    module_type: OnlineAnalysis
    group_name: tpc_channel
    @table::analysis_config


    metric_config: {
      streams: ["archiving"]
      groups: {
	tpc_channel:[[0,5760]] # 8 crates
      }
      metrics: {
        rms: {
          units: ADC
          #title: "TPC wire %(instance)s rms"
          display_range: [0, 10]
        }
	filtered_rms: {
          units: ADC
          #title: "TPC wire %(instance)s rms"
          display_range: [0, 10]
        }
        baseline: {
          units: ADC
          #title: "TPC wire %(instance)s baseline"
          display_range: [1990, 2040]
        }
        next_channel_dnoise: {
          #title: "TPC wire %(instance)s next channel dnoise"
          display_range: [0.2, 1.2]
        }
        mean_peak_height: {
          units: ADC
          #title: "TPC wire %(instance)s mean peak height"
          display_range: [0, 50]
        }
        occupancy: {
          #title: "TPC wire %(instance)s occupancy"
          display_range: [0., 1.]
        }
      }
    }
    SelectEvents: [tpc_only]
  }

  TPCOnlineAnalysisDenoised:{
    module_type: OnlineAnalysis
    group_name: tpc_channel
    @table::analysis_config

    raw_digit_instance: ""

    metric_prefix: filtered_

    send_peakheight: false
    send_baseline: false
    send_occupancy: false
    send_dnoise: false
    
    SelectEvents: [tpc_only]
  }

  CRTAna:{
    module_type: BernCRTdqm

    metric_board_config: {
      groups:
      {
        CRT_board:[[25,96]] //73 crt boards
      }
      streams:[archiving]
      metrics:{
        TS0:{}
        TS1:{}
        n_events:{}
        MaxADCValue:{}
        baseline:{}	
      }
    }
    metric_channel_config: {
      groups:
      {
        CRT_channel:[[0,256]]
      }
      streams:[archiving]
      
      metrics:{
        ADC:{
          display_range: [0, 5000]
        }
      }	
    }
  }

}

physics.pscale_OnMonFiles:    [prescale20, @sequence::daqTPC ]
physics.online_purity:   [prescale2,  @sequence::daqTPC, purityana0, purityana1]
physics.tpc_only: [ pscale2, @sequence::daqTPC ]
physics.pmt_only: [ daqPMT ]

# BH: COMMENT PSCALE_OnMonFiles TO TURN OFF OUTPUT FILE
physics.tpc_paths: [ pscale_OnMonFiles, online_purity, tpc_only ]
physics.pmt_paths: [ pmt_only ]

physics.trigger_paths: [ 
                         #@sequence::physics.tpc_paths,
		         @sequence::physics.pmt_paths
                       ]


physics.anatpc: [ OnlineAnalysis, OnlineAnalysisDenoised, OnlineAnalysisRawData, Meta, PurityAnalysis ]
physics.anapmt: [ MetaPMT, CAENV1730WaveformAnalysis ]

physics.a: [ @sequence::physics.anatpc, @sequence::physics.anapmt ]

physics.decoded_stream: [ decodedout ]

#physics.end_paths: [ a, decoded_stream ] # BH: COMMENT DECODED_STREAM TO TURN OFF OUTPUT FILE
#physics.end_paths: [ anatpc, decoded_stream ] # BH: COMMENT DECODED_STREAM TO TURN OFF OUTPUT FILE
physics.end_paths: [ anapmt ] # BH: COMMENT DECODED_STREAM TO TURN OFF OUTPUT FILE

process_name: ICARUSOnlineMonitor
