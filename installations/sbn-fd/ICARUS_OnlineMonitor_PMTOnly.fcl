#include "redis_connection.fcl"
#include "icarus_online_decoder_defs.fcl"
#include "icarus_pmt_analysis_defs.fcl"
#include "icarus_trigger_analysis_defs.fcl"

#service overrides
services.RedisConnection: @local::redis_connection
services.RedisConnection.host: "icarus-db01.fnal.gov"
services.InitMetricManager: {
  connections: {
    archiving: {
      level: 3
      metricPluginType: "redis"
      reporting_interval: 60.0 # 60s
      verbose: true
      // need to add postfix otherwise this metric sender and the other one will collide
      redis_key_postfix: ":archiving"
      send_zeros: false
    }
  }
}
services.ArtdaqSharedMemoryServiceInterface:
{
  service_provider: "ArtdaqSharedMemoryService"
}

services.NuRandomService: @erase
services.MemoryTracker: @erase
services.TimeTracker: @erase
services.TFileService.fileName: "/dev/null"

#replace the source
source:
{
  module_type: TransferInput
  register_fragment_types: false
  # The timeout shouldn't be much smaller than the period between events, otherwise
  # there's a spew of timeout messages
  timeoutInUsecs: 50000000

  commanderPluginType: xmlrpc
  dispatcherHost: localhost
  dispatcherPort: 6020

  transfer_plugin: {

 #    unique_label: "OnlineMonitor"
      unique_label: "MatteoOnlineMonitor"
      transferPluginType: Shmem
 #     shm_key: 0x40471454
      shm_key: 0x407474211
      max_fragment_size_words: 100000000 #58543672 #33554432
      #max_event_size_bytes: 468349376
      first_event_builder_rank: 0
          source_rank: 5
          destination_rank: 6
  }

  dispatcher_config: {
    unique_label: "OnlineMonitor"
    path: [ out ]
    physics: {}
    outputs: {
      out: {
        module_type: TransferOutput
        transfer_plugin: {

           unique_label: "OnlineMonitor"
            transferPluginType: Shmem

            shm_key: 0x40471454

            max_fragment_size_words: 100000000 #58543672 #33554432
              first_event_builder_rank: 0
              destination_rank: 6
        }
      }
    }
  }
}

#decoder output
outputs.decodedout:{
  module_type: RootOutput
  fileName:    "/data/onmon_files/onmon_output_%r_%s_%tc_%#-decoded.root"
  dataTier:    "raw"
  compressionLevel: 3
  SelectEvents: [pscale_OnMonFiles]

  fileProperties: { 
    #maxSubRuns: 1 
    #maxRuns: 1 
    maxEvents: 1
  }
}

#declare a filters section
physics.filters:
{
  prescale1:{ 
    module_type: "Prescaler"
    prescaleFactor: 1
    prescaleOffset: 0
  }
  prescale2:{ 
    module_type: "Prescaler"
    prescaleFactor: 2
    prescaleOffset: 0
  }
  prescale10:{ 
    module_type: "Prescaler"
    prescaleFactor: 10
    prescaleOffset: 0
  }
  prescale20:{ 
    module_type: "Prescaler"
    prescaleFactor: 20
    prescaleOffset: 0
  }
  prescale100:{ 
    module_type: "Prescaler"
    prescaleFactor: 100
    prescaleOffset: 0
  }
}

physics.producers:
{
  daqTrigger: @local::decodeTriggerOnline
  daqPMT: @local::decodePMTOnline
}

physics.analyzers:
{
  pmtana: @local::pmtAnalysis
  timingana: @local::timingAnalysis
  triggerana: @local::triggerAnalysis 
 
  MetaPMT: {
    module_type: ReportMetadata
    RedisKey: eventmetaPMT

    SelectEvents: [pmt_only]
  }
}

##paths
physics.pmt_only: [ prescale1, daqTrigger, daqPMT ]

##setting up event filtering
physics.analyzers.pmtana.SelectEvents: [ pmt_only ]
physics.analyzers.timingana.SelectEvents: [ pmt_only ]
physics.analyzers.triggerana.SelectEvents: [ pmt_only ]

##analysis paths combined
physics.anatrigger: [ triggerana ]
physics.anapmt: [ MetaPMT, pmtana, timingana] 

physics.decoded_stream: [ decodedout ]

####FINAL PATHS
physics.trigger_paths: [ pmt_only ]  
physics.end_paths: [ anatrigger, anapmt ]

process_name: ICARUSOnlineMonitor
