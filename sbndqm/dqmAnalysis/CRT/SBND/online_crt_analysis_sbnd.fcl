#include "redis_connection.fcl"

process_name: Dump

services: {
  # TFileService: { fileName: "crt_test_1.root" }
   #RedisConnection: {
   # host: "sbnd-db01.fnal.gov"
   #}
#  message: @local::standard_debug

  RedisConnection: @local::redis_connection
  InitMetricManager: {
    connections: {
      fast: @local::redis_metric_fast
      slow: @local::redis_metric_slow
      archive: @local::redis_metric_archive
    }
  }
}

services.RedisConnection.host: "sbnd-db01.fnal.gov"
# services.RedisConnection.port: 6379
services.RedisConnection.password: "B4730D6D9606E3EB37048EB017D4C69EFB56243CCC408E3BEC3BFDEEDF792876" 

services.ArtdaqSharedMemoryServiceInterface:
{
  service_provider: ArtdaqGlobalsService
}


source: {
   commanderPluginType: xmlrpc
   dispatcherHost: localhost
   dispatcherPort: 6021
   dispatcher_config: {
      outputs: {
         out: {
            module_type: "TransferOutput"
            transfer_plugin: {
               destination_rank: 6
               first_event_builder_rank: 0
               max_fragment_size_words: 1e8
               shm_key: 1078400086
               transferPluginType: "Shmem"
               unique_label: "CRTOnlineMonitor"
            }
         }
      }
      path: [
         "out"
      ]
      physics: {}
      unique_label: "CRTOnlineMonitor"
}
   module_type: "TransferInput"
   register_fragment_types: false
   timeoutInUsecs: 5e7
   transfer_plugin: {
      destination_rank: 6
      first_event_builder_rank: 0
      max_fragment_size_words: 1e8
      shm_key: 1078400086
      source_rank: 5
      transferPluginType: "Shmem"
      unique_label: "CRTOnlineMonitor"
   }
}

outputs:
{
  dumper: {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
    onlyIfPresent: true
  }
}

physics:
{

 producers:{}

 filters:{}

 analyzers:{

   crtana: {
     module_type: BernCRTdqm

    metric_board_config: {
	groups:{
		#CRT_board:[193,85,87,88,89,79,80,81,0]
		#CRT_board:[44,147,146,131,79,206,204,200,18,160,222,220,81,85,143,162,133,132,83,84,104,103,102,101,93,94,95,87,97,98,77,78,82,86,90,91,99,100,151,150,136,157,158,182,149,73,181,88,152,156,153,159,134,135,238,155]
		#CRT_board:[18, 132, 133, 162, 143, 131, 146, 147, 44, 160, 222, 220, 81, 85, 200, 206, 204, 200, 174, 148, 163, 164, 165, 80, 142, 42, 138, 130, 19, 202, 199, 197, 198, 45, 203, 207, 60, 56, 169, 166, 24, 57, 33, 34, 61, 171, 59, 176, 170, 168, 172, 173, 82, 86, 90, 91, 99, 100, 101, 102, 103, 104, 84, 83, 78, 77, 98, 97, 236, 95, 94, 93, 151,150,136,157,158,182,149,73,181,88,152,156,153,159,134,135,238,155]
		CRT_board: [88, 152, 156, 153, 159, 134, 135, 238, 155, 151, 150, 136, 157, 158, 182, 149, 73, 58, 60, 56, 169, 166, 24, 57, 33, 34, 61, 171, 59, 176, 170, 168, 172, 173, 160, 222, 220, 81, 85, 143, 162, 133, 132, 44, 147, 146, 131, 79, 206, 204, 200, 18, 174, 148, 163, 164, 165, 55, 120, 42, 138, 130, 197, 199, 202, 19, 198, 45, 203, 207, 82, 86, 90, 91, 99, 100, 93, 94, 95, 87, 97, 98, 77, 78, 83, 84, 104, 103, 102, 101, 111, 107, 106, 115, 105, 123, 50, 125, 126, 129, 114, 118, 48, 108, 119, 223, 36, 51, 71, 187, 16, 205, 35, 228, 75, 121, 40, 39, 128, 127, 178, 144, 180, 141, 179, 109, 116, 47, 49, 117, 185, 184, 183, 72, 216, 213, 212, 211, 210, 209]}                
	streams:[archiving]
		
	metrics:{
		TS0:{}
		TS1:{}
		T0clockdrift:{}
		#T1clockdrift:{}
		
		MaxADCValue:{}
		MaxADCChannel:{}
		Flag:{}
		
		baseline:{}	

                earlysynch:{alarmrange: [-100000,100000] }
                latesynch:{ alarmrange: [-100000,100000] }

                #lastbighit:{ alarmrange: [0,100000000] }
		
		#CRT_hits_beam_plane_0:{}
		#CRT_hits_beam_plane_1:{}
		#CRT_hits_beam_plane_2:{}
		#CRT_hits_beam_plane_3:{}
		#CRT_hits_beam_plane_4:{}
		#CRT_hits_beam_plane_5:{}
		#CRT_hits_beam_plane_6:{}
		
		#T1_resets_per_event:{}
		
		#num_fragments:{}
		#num_hits:{}
}
}
    metric_channel_config: {
	groups:{
                CRT_channel:[[0,7616]]
	}
	streams:[archiving]

        metrics:{
                ADC:{
			display_range: [0, 4000]
		}
		lastbighit:{}
		pedestalMean:{}
		pedestalRMS:{}
		pedestalRMS2:{}
		}	
	}
	
    metric_event_config: {
    	groups:{
	}
	streams:[archiving]

        metrics:{
                
		}
    	}
	
    metric_fragment_config: {
    	groups:{
		CRT_cont_frag:[]
	}
	streams:[archiving]

        metrics:{
                
		}
    	}

}

 }
 
 


 #define the output stream, there could be more than one if using filters 
 stream1:  [ ]
 ana: [ crtana ]

  out1 : [dumper]
  end_paths: [ ana ]
 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ ana ]  
}



