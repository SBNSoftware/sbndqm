physics:
{
  analyzers:
  {
    ExampleTimeStream: {
      module_type: ExampleTimeStream
      sleep_time: 1

      metrics: {
        redis_metric_fast: { // can be named anything
          redis_passfile: passfile
          level: 3
          metricPluginType: "redis"
          // period in seconds to send metric to database
          reporting_interval: 2.0
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":fast" 
        }
        redis_metric_slow: { // can be named anything
          redis_passfile: passfile
          level: 3
          metricPluginType: "redis"
          reporting_interval: 10.0
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":slow" 
        }
      }

      metric_config: {
        groups: [example]
        metrics: {
          rms: {
            // NOTE: all configs for each metric are optional

            // default range over which to display metric
            display_range: [0., 10.]
            // if the metric leaves this range, issue a warning
            warning_range: [1., 5.]
            // if the metric leaves this range, issue an alarm
            alarm_range: [0.5, 7.5]
            // units of metric
            units: ADC
            // title of the metric to be shown in displays

            // The title of the metric will be formatted in python
            // passed the parameters "group" and "instance" as strings
            // So, or this title, given the group "example" and instance
            // "1", the title would be: "example Wire 1 RMS" 
            titie: "%(group)s Wire %(instance)s RMS"
          }
        }
      }
    }
  }
  a: [ExampleTimeStream]
  end_paths: [a]
}

source:
{
  module_type: EmptyEvent
}


process_name: EXAMPLESTREAM
