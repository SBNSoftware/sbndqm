
physics: {
  analyzers:
  {
    ExampleTimeStream: {
      module_type: ExampleTimeStream

      metrics: {
        redis_metric_fast: { // can be named anything
          level: 3
          metricPluginType: "redis"
          // period in seconds to send metric to database
          reporting_interval: 2.0
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":fast" 
        }
        redis_metrix_slow: { // can be named anything
          level: 3
          metricPluginType: "redis"
          reporting_interval: 10.0
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":slow" 
        }
      }
      metric_config: {
        // Each group name, mapping to the list of instances for this group
        // The list of instances are the set of instances that you send metrics
        // to in this group. To make the config more concise, if using instance
        // names which are sequential numbers you can also provide a pair
        // of [lo, hi) and it will count as instance names lo,lo+1,...,hi-1
        groups: {
          example: [ [0, 10] ]
          // could also be
          // example: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          // or
          // example: [[0,8], 8, 9]
        }

        streams: [slow, fast]

        metrics: {
          rms: {
            // NOTE: all configs for each metric are optional

            // default range over which to display metric
            display_range: [0., 10.]
            // if the metric leaves this range, issue a warning
            warning_range: [1., 5.]
            // if the metric leaves this range, issue an alarm
            alarm_range: [0.5, 7.5]
            // units of metric
            units: ADC
            // title of the metric to be shown in displays

            // The title of the metric will be formatted in python
            // passed the parameters "group" and "instance" as strings
            // So, or this title, given the group "example" and instance
            // "1", the title would be: "example Wire 1 RMS" 
            titie: "%(group)s Wire %(instance)s RMS"
          }
        }
      }
    }
  }
  a: [ExampleTimeStream]
  end_paths: [a]

}

source:
{
  module_type: TransferInput

  # The timeout shouldn't be much smaller than the period between events, otherwise 
  # there's a spew of timeout messages

  # timeoutInUsecs: 10000000
  timeoutInUsecs: 10000000

  commanderPluginType: xmlrpc
  dispatcherHost: localhost
  dispatcherPort: 7166

  transfer_plugin: {

     unique_label: "ExampleOnlineMonitor"
      transferPluginType: Shmem
      shm_key: 0x40471453
      max_fragment_size_words: 2097152
      first_event_builder_rank: 0
          source_rank: 5
          destination_rank: 6
  }

  dispatcher_config: {
    unique_label: "ExampleOnlineMonitor"
    path: [ out ]
    physics: {}
    outputs: {
      out: {
        module_type: TransferOutput
        transfer_plugin: {

           unique_label: "ExampleOnlineMonitor"
            transferPluginType: Shmem

            shm_key: 0x40471453

            max_fragment_size_words: 2097152
              first_event_builder_rank: 0
              destination_rank: 6
        }
      }
    }
  }
}

process_name: EXAMPLESTREAMMonitor
