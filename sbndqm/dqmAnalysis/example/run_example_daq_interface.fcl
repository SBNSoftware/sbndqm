
physics: {
  analyzers:
  {
    ExampleTimeStream: {
      module_type: ExampleTimeStream

      metrics: {
        redis_metric_fast: { // can be named anything
          level: 3
          metricPluginType: "redis"
          // period in seconds to send metric to database
          reporting_interval: 2.0
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":fast" 
        }
        redis_metrix_slow: { // can be named anything
          level: 3
          metricPluginType: "redis"
          reporting_interval: 10.0
          verbose: true
          // need to add postfix otherwise this metric sender and the other one will collide
          redis_key_postfix: ":slow" 
        }
      }
    }
  }
  a: [ExampleTimeStream]
  end_paths: [a]

}

source:
{
  module_type: TransferInput

  # The timeout shouldn't be much smaller than the period between events, otherwise 
  # there's a spew of timeout messages

  # timeoutInUsecs: 10000000
  timeoutInUsecs: 10000000

  commanderPluginType: xmlrpc
  dispatcherHost: localhost
  dispatcherPort: 7166

  transfer_plugin: {

     unique_label: "ExampleOnlineMonitor"
      transferPluginType: Shmem
      shm_key: 0x40471453
      max_fragment_size_words: 2097152
      first_event_builder_rank: 0
          source_rank: 5
          destination_rank: 6
  }

  dispatcher_config: {
    unique_label: "ExampleOnlineMonitor"
    path: [ out ]
    physics: {}
    outputs: {
      out: {
        module_type: TransferOutput
        transfer_plugin: {

           unique_label: "ExampleOnlineMonitor"
            transferPluginType: Shmem

            shm_key: 0x40471453

            max_fragment_size_words: 2097152
              first_event_builder_rank: 0
              destination_rank: 6
        }
      }
    }
  }
}

process_name: EXAMPLESTREAMMonitor
